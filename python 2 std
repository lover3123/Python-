import json
import uuid
from datetime import datetime
import tkinter as tk
from tkinter import messagebox, ttk

# ---- Student & System Classes ----
class Student:
    def __init__(self, name, dob, course, email):
        self.id = str(uuid.uuid4())[:8]
        self.name = name
        self.dob = dob
        self.course = course
        self.email = email
        self.admission_date = datetime.now().strftime('%Y-%m-%d')

    def to_dict(self):
        return {
            "id": self.id,
            "name": self.name,
            "dob": self.dob,
            "course": self.course,
            "email": self.email,
            "admission_date": self.admission_date
        }

class AdmissionSystem:
    def __init__(self, filename="students.json"):
        self.filename = filename
        self.students = self.load_students()

    def load_students(self):
        try:
            with open(self.filename, "r") as file:
                return json.load(file)
        except FileNotFoundError:
            return []

    def save_students(self):
        with open(self.filename, "w") as file:
            json.dump(self.students, file, indent=4)

    def add_student(self, student):
        self.students.append(student.to_dict())
        self.save_students()

    def search_students(self, keyword):
        return [s for s in self.students if keyword.lower() in s["name"].lower() or s["id"] == keyword]

# ---- GUI Setup ----
class StudentApp:
    def __init__(self, root):
        self.system = AdmissionSystem()
        self.root = root
        self.root.title("ðŸŽ“ Student Admission System")
        self.root.geometry("700x500")
        self.root.configure(bg="#f0f4f7")

        self.setup_ui()

    def setup_ui(self):
        # Labels and Entries
        tk.Label(self.root, text="Name:", bg="#f0f4f7").grid(row=0, column=0, padx=10, pady=5, sticky="w")
        self.name_entry = tk.Entry(self.root, width=30)
        self.name_entry.grid(row=0, column=1, padx=10)

        tk.Label(self.root, text="DOB (YYYY-MM-DD):", bg="#f0f4f7").grid(row=1, column=0, padx=10, pady=5, sticky="w")
        self.dob_entry = tk.Entry(self.root, width=30)
        self.dob_entry.grid(row=1, column=1, padx=10)

        tk.Label(self.root, text="Course:", bg="#f0f4f7").grid(row=2, column=0, padx=10, pady=5, sticky="w")
        self.course_entry = tk.Entry(self.root, width=30)
        self.course_entry.grid(row=2, column=1, padx=10)

        tk.Label(self.root, text="Email:", bg="#f0f4f7").grid(row=3, column=0, padx=10, pady=5, sticky="w")
        self.email_entry = tk.Entry(self.root, width=30)
        self.email_entry.grid(row=3, column=1, padx=10)

        # Buttons
        tk.Button(self.root, text="Add Student", command=self.add_student).grid(row=4, column=1, pady=10)

        tk.Label(self.root, text="Search by Name or ID:", bg="#f0f4f7").grid(row=5, column=0, padx=10, sticky="w")
        self.search_entry = tk.Entry(self.root, width=30)
        self.search_entry.grid(row=5, column=1)
        tk.Button(self.root, text="Search", command=self.search_student).grid(row=5, column=2, padx=5)

        # Listbox to display students
        self.tree = ttk.Treeview(self.root, columns=("ID", "Name", "Course"), show="headings", height=10)
        self.tree.heading("ID", text="Student ID")
        self.tree.heading("Name", text="Name")
        self.tree.heading("Course", text="Course")
        self.tree.grid(row=6, column=0, columnspan=3, padx=10, pady=20)

        self.load_all_students()

    def add_student(self):
        name = self.name_entry.get()
        dob = self.dob_entry.get()
        course = self.course_entry.get()
        email = self.email_entry.get()

        if not all([name, dob, course, email]):
            messagebox.showerror("Error", "All fields are required.")
            return

        student = Student(name, dob, course, email)
        self.system.add_student(student)
        self.tree.insert('', 'end', values=(student.id, student.name, student.course))
        messagebox.showinfo("Success", f"Student {name} added.")
        self.clear_entries()

    def search_student(self):
        keyword = self.search_entry.get()
        results = self.system.search_students(keyword)
        self.tree.delete(*self.tree.get_children())
        for stu in results:
            self.tree.insert('', 'end', values=(stu["id"], stu["name"], stu["course"]))
        if not results:
            messagebox.showinfo("No Results", "No matching student found.")

    def load_all_students(self):
        self.tree.delete(*self.tree.get_children())
        for stu in self.system.students:
            self.tree.insert('', 'end', values=(stu["id"], stu["name"], stu["course"]))

    def clear_entries(self):
        self.name_entry.delete(0, tk.END)
        self.dob_entry.delete(0, tk.END)
        self.course_entry.delete(0, tk.END)
        self.email_entry.delete(0, tk.END)

# ---- Main ----
if __name__ == "__main__":
    root = tk.Tk()
    app = StudentApp(root)
    root.mainloop()